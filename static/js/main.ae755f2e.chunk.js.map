{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","todoClasses","classNames","completed","id","title","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","todosList","App","useState","setTitle","setUserId","hasTitleError","sethasTitleError","hasUserIdError","sethasUserIdError","setTodos","action","method","onSubmit","event","preventDefault","inludesOnlySpaces","trim","newTodo","Math","max","currentTodos","htmlFor","type","onChange","target","value","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae755f2e.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User | null;\n};\nexport const UserInfo:React.FC<Props> = ({ user }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${user?.email}`}\n  >\n    {user?.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const todoClasses = classNames('TodoInfo',\n    { 'TodoInfo--completed': todo.completed });\n\n  return (\n    <article className={todoClasses} data-id={todo.id}>\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\n\nfunction getUserById(userId:number) {\n  return usersFromServer.find(user => user.id === userId);\n}\n\nexport const todosList: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId) || null,\n}));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [hasTitleError, sethasTitleError] = useState(false);\n  const [hasUserIdError, sethasUserIdError] = useState(false);\n  const [todos, setTodos] = useState<Todo[]>(todosList);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    sethasTitleError(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    sethasUserIdError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const inludesOnlySpaces = title.trim() === '';\n\n    sethasTitleError(inludesOnlySpaces);\n\n    sethasUserIdError(!userId);\n\n    if (inludesOnlySpaces || !userId) {\n      return;\n    }\n\n    if (title && userId) {\n      const newTodo:Todo = {\n        id: Math.max(...todos.map(todo => todo.id)) + 1,\n        title,\n        completed: false,\n        userId,\n        user: getUserById(userId) || null,\n      };\n\n      setTodos(currentTodos => [...currentTodos, newTodo]);\n\n      setTitle('');\n      sethasTitleError(false);\n      setUserId(0);\n      sethasUserIdError(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"post-title\" className=\"label\">Title: </label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            onChange={handleTitleChange}\n            value={title}\n            id=\"post-title\"\n          />\n\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"post-user\">User: </label>\n\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleUserIdChange}\n            id=\"post-user\"\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList todos={todos} />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}